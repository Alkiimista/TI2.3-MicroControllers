
Week3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0a  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c6  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041d  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000292  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	75 d0       	rcall	.+234    	; 0x19e <main>
  b4:	7c c0       	rjmp	.+248    	; 0x1ae <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
	lcd_strobe_lcd_e();
}

void lcd_strobe_lcd_e()
{
	PORTC |= (1<<LCD_E);	// E high
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_strobe_lcd_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_strobe_lcd_e+0xc>
  c4:	00 00       	nop
	_delay_ms(1);			
	PORTC &= ~(1<<LCD_E);  	// E low
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_strobe_lcd_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_strobe_lcd_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <init_lcd_4bit>:
    {
    }
}

void init_lcd_4bit()
{
  d6:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;	// PORTC is on output mode.
  dc:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;	// Sets the mode to 4 bits.
  de:	c0 e2       	ldi	r28, 0x20	; 32
  e0:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  e2:	ea df       	rcall	.-44     	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = 0x20;   // Sets the mode to 4 bits.
  e4:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  e6:	e8 df       	rcall	.-48     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x80;	
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  ec:	e5 df       	rcall	.-54     	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = 0x00;   // Display on/off control
  ee:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  f0:	e3 df       	rcall	.-58     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  f6:	e0 df       	rcall	.-64     	; 0xb8 <lcd_strobe_lcd_e>

	
	PORTC = 0x00;   // Entry mode set
  f8:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
  fa:	de df       	rcall	.-68     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x60;	// Sets the DDRAM adress to send and receive.
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_strobe_lcd_e>

}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_write_data>:
		}
	}
}

void lcd_write_data(unsigned char byte)
{
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 10a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 10c:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 10e:	d4 df       	rcall	.-88     	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 116:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 118:	cf df       	rcall	.-98     	; 0xb8 <lcd_strobe_lcd_e>
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <display_text>:
	lcd_strobe_lcd_e();

}

void display_text(char *str)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	while(*str)
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	29 f0       	breq	.+10     	; 0x134 <display_text+0x16>
 12a:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_data(*str++);
 12c:	ec df       	rcall	.-40     	; 0x106 <lcd_write_data>

}

void display_text(char *str)
{
	while(*str)
 12e:	89 91       	ld	r24, Y+
 130:	81 11       	cpse	r24, r1
 132:	fc cf       	rjmp	.-8      	; 0x12c <display_text+0xe>
	{
		lcd_write_data(*str++);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 13e:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 140:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 142:	ba df       	rcall	.-140    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 144:	c2 95       	swap	r28
 146:	c0 7f       	andi	r28, 0xF0	; 240
 148:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 14a:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 14c:	b5 df       	rcall	.-150    	; 0xb8 <lcd_strobe_lcd_e>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <set_cursor>:
		lcd_write_data(*str++);
	}
}

void set_cursor(int position)
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
	lcd_write_command(0x80);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	ed df       	rcall	.-38     	; 0x13a <lcd_write_command>
	int currentLocation = 0;
	if(position != 0)
	{
		for(int i = 0; i < position; i++)
 160:	10 16       	cp	r1, r16
 162:	11 06       	cpc	r1, r17
 164:	bc f4       	brge	.+46     	; 0x194 <set_cursor+0x42>
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(currentLocation != 15)
 16a:	cf 30       	cpi	r28, 0x0F	; 15
 16c:	d1 05       	cpc	r29, r1
 16e:	41 f0       	breq	.+16     	; 0x180 <set_cursor+0x2e>
			{
					lcd_write_command(0x14);
 170:	84 e1       	ldi	r24, 0x14	; 20
 172:	e3 df       	rcall	.-58     	; 0x13a <lcd_write_command>
 174:	81 ee       	ldi	r24, 0xE1	; 225
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <set_cursor+0x26>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <set_cursor+0x2c>
 17e:	00 00       	nop
			{
				lcd_write_command(0x80);
				currentLocation = 0;
				_delay_ms(5);
			}
			currentLocation++;
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <set_cursor+0x34>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <set_cursor+0x3a>
 18c:	00 00       	nop
{
	lcd_write_command(0x80);
	int currentLocation = 0;
	if(position != 0)
	{
		for(int i = 0; i < position; i++)
 18e:	c0 17       	cp	r28, r16
 190:	d1 07       	cpc	r29, r17
 192:	59 f7       	brne	.-42     	; 0x16a <set_cursor+0x18>
			}
			currentLocation++;
			_delay_ms(5);
		}
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <main>:

#define F_CPU 80000000;

int main(void)
{
	init_lcd_4bit();
 19e:	9b df       	rcall	.-202    	; 0xd6 <init_lcd_4bit>

	set_cursor(3);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	d6 df       	rcall	.-84     	; 0x152 <set_cursor>
	display_text("Dit is");
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	b9 df       	rcall	.-142    	; 0x11e <display_text>
    while (1) 
    {
    }
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0xe>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
