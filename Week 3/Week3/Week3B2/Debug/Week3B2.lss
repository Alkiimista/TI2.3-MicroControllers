
Week3B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3c  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000962  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000412  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ca  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	43 d0       	rcall	.+134    	; 0x14a <main>
  c4:	47 c0       	rjmp	.+142    	; 0x154 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	{
		PORTC = 0x14;
		lcd_strobe_lcd_e();
		_delay_ms(40);
	}
}
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_strobe_lcd_e+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_strobe_lcd_e+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_strobe_lcd_e+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_strobe_lcd_e+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <init_lcd_4bit>:
  e6:	cf 93       	push	r28
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	c0 e2       	ldi	r28, 0x20	; 32
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	ea df       	rcall	.-44     	; 0xc8 <lcd_strobe_lcd_e>
  f4:	c5 bb       	out	0x15, r28	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	e5 df       	rcall	.-54     	; 0xc8 <lcd_strobe_lcd_e>
  fe:	15 ba       	out	0x15, r1	; 21
 100:	e3 df       	rcall	.-58     	; 0xc8 <lcd_strobe_lcd_e>
 102:	80 ef       	ldi	r24, 0xF0	; 240
 104:	85 bb       	out	0x15, r24	; 21
 106:	e0 df       	rcall	.-64     	; 0xc8 <lcd_strobe_lcd_e>
 108:	15 ba       	out	0x15, r1	; 21
 10a:	de df       	rcall	.-68     	; 0xc8 <lcd_strobe_lcd_e>
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	85 bb       	out	0x15, r24	; 21
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_strobe_lcd_e>
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <lcd_write_data>:

void lcd_write_data(unsigned char byte)
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 11a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 11c:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 11e:	d4 df       	rcall	.-88     	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 120:	c2 95       	swap	r28
 122:	c0 7f       	andi	r28, 0xF0	; 240
 124:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 126:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 128:	cf df       	rcall	.-98     	; 0xc8 <lcd_strobe_lcd_e>
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <display_text>:
	lcd_strobe_lcd_e();

}

void display_text(char *str)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	while(*str)
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	29 f0       	breq	.+10     	; 0x144 <display_text+0x16>
 13a:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_data(*str++);
 13c:	ec df       	rcall	.-40     	; 0x116 <lcd_write_data>

}

void display_text(char *str)
{
	while(*str)
 13e:	89 91       	ld	r24, Y+
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <display_text+0xe>
	{
		lcd_write_data(*str++);
	}
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <main>:
volatile int timesPressed = 0;

int main(void)
{
	char str[2];
	init_lcd_4bit();
 14a:	cd df       	rcall	.-102    	; 0xe6 <init_lcd_4bit>
	int test = 3;
    while (1) 
    {
		display_text("8");
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	ee df       	rcall	.-36     	; 0x12e <display_text>
    }
 152:	fc cf       	rjmp	.-8      	; 0x14c <main+0x2>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
