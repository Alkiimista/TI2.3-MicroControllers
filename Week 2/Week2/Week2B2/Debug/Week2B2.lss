
Week2B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091d  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084a  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036b  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	b0 c0       	rjmp	.+352    	; 0x16a <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a3 d0       	rcall	.+326    	; 0x20a <main>
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:

volatile int i = 0x01;
volatile int reverse = 0;

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	if(reverse == 1 || i > 0x80)
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	39 f0       	breq	.+14     	; 0xf0 <__vector_1+0x28>
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ea:	81 38       	cpi	r24, 0x81	; 129
  ec:	91 05       	cpc	r25, r1
  ee:	a4 f0       	brlt	.+40     	; 0x118 <__vector_1+0x50>
	{
		i <<= 1;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTA = i;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 10c:	8b bb       	out	0x1b, r24	; 27
		reverse = 0;
 10e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 112:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 116:	22 c0       	rjmp	.+68     	; 0x15c <__vector_1+0x94>
	}
	else if(reverse == 0 || i < 0x01)
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 11c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 120:	89 2b       	or	r24, r25
 122:	39 f0       	breq	.+14     	; 0x132 <__vector_1+0x6a>
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 12c:	18 16       	cp	r1, r24
 12e:	19 06       	cpc	r1, r25
 130:	ac f0       	brlt	.+42     	; 0x15c <__vector_1+0x94>
	{
		i >>= 1;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTA = i;
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 14e:	8b bb       	out	0x1b, r24	; 27
		reverse = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 158:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_2>:

ISR(INT1_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
	if(i < 0x80 || reverse == 0)
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 180:	80 38       	cpi	r24, 0x80	; 128
 182:	91 05       	cpc	r25, r1
 184:	34 f0       	brlt	.+12     	; 0x192 <__vector_2+0x28>
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 18e:	89 2b       	or	r24, r25
 190:	b1 f4       	brne	.+44     	; 0x1be <__vector_2+0x54>
	{
		i <<= 1;
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTA = i;
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ae:	8b bb       	out	0x1b, r24	; 27
		reverse = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1bc:	1f c0       	rjmp	.+62     	; 0x1fc <__vector_2+0x92>
	}
	else if(i > 0x01 || reverse == 1)
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	02 97       	sbiw	r24, 0x02	; 2
 1c8:	34 f4       	brge	.+12     	; 0x1d6 <__vector_2+0x6c>
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	99 f4       	brne	.+38     	; 0x1fc <__vector_2+0x92>
	{
		i >>= 1;
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1de:	95 95       	asr	r25
 1e0:	87 95       	ror	r24
 1e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTA = i;
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f2:	8b bb       	out	0x1b, r24	; 27
		reverse = 0;
 1f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:

int main(void)
{
    /* Replace with your application code */
	DDRD = 0xF0;
 20a:	80 ef       	ldi	r24, 0xF0	; 240
 20c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b11111111;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	8a bb       	out	0x1a, r24	; 26

	EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
 212:	ea e6       	ldi	r30, 0x6A	; 106
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8b 60       	ori	r24, 0x0B	; 11
 21a:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 21c:	89 b7       	in	r24, 0x39	; 57
 21e:	83 60       	ori	r24, 0x03	; 3
 220:	89 bf       	out	0x39, r24	; 57

	sei();
 222:	78 94       	sei

    while (1)
    {
    }
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x1a>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
