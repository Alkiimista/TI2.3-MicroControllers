
Week2B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000336  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000020f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	7e c0       	rjmp	.+252    	; 0x102 <__vector_1>
   6:	00 00       	nop
   8:	ba c0       	rjmp	.+372    	; 0x17e <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	99 d0       	rcall	.+306    	; 0x1f6 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
	}
}

void wait(int ms)
{
	for(int i = 0; i < ms; i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	e9 ef       	ldi	r30, 0xF9	; 249
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <display>:
	}
}

void display(int digit)
{
	if(digit > 15)
  ea:	80 31       	cpi	r24, 0x10	; 16
  ec:	91 05       	cpc	r25, r1
  ee:	1c f0       	brlt	.+6      	; 0xf6 <display+0xc>
	{
		PORTC = numbers[14];
  f0:	89 e7       	ldi	r24, 0x79	; 121
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	08 95       	ret
	}
	else
		PORTC = numbers[digit];
  f6:	fc 01       	movw	r30, r24
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
 100:	08 95       	ret

00000102 <__vector_1>:
};

volatile int index = 0;

ISR(INT0_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	if(index > 15)
 128:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 12c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 130:	40 97       	sbiw	r24, 0x10	; 16
 132:	34 f0       	brlt	.+12     	; 0x140 <__vector_1+0x3e>
		index = 15;
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 13c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	display(index++);
 140:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 144:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 148:	9c 01       	movw	r18, r24
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 152:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
 156:	c9 df       	rcall	.-110    	; 0xea <display>
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0b be       	out	0x3b, r0	; 59
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_2>:

ISR(INT1_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	0b b6       	in	r0, 0x3b	; 59
 18a:	0f 92       	push	r0
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	if(index < 0)
 1a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1ac:	99 23       	and	r25, r25
 1ae:	24 f4       	brge	.+8      	; 0x1b8 <__vector_2+0x3a>
		index = 0;
 1b0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1b4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	display(index--);
 1b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1c0:	9c 01       	movw	r18, r24
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	31 09       	sbc	r19, r1
 1c6:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 1ca:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
 1ce:	8d df       	rcall	.-230    	; 0xea <display>
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:

int main(void)
{
	DDRC = 0b1111111;
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	84 bb       	out	0x14, r24	; 20

	EICRA |= 0x0F;			// INT1 falling edge, INT0 rising edge
 1fa:	ea e6       	ldi	r30, 0x6A	; 106
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8f 60       	ori	r24, 0x0F	; 15
 202:	80 83       	st	Z, r24
	EIMSK |= 0x03;			// Enable INT1 & INT0
 204:	89 b7       	in	r24, 0x39	; 57
 206:	83 60       	ori	r24, 0x03	; 3
 208:	89 bf       	out	0x39, r24	; 57

	sei();
 20a:	78 94       	sei
	while (1)
	{
		wait(500);
 20c:	84 ef       	ldi	r24, 0xF4	; 244
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	5b df       	rcall	.-330    	; 0xc8 <wait>
		if(PIND & 0b0000001 && PIND & 0b00000010)
 212:	80 9b       	sbis	0x10, 0	; 16
 214:	fb cf       	rjmp	.-10     	; 0x20c <main+0x16>
 216:	81 9b       	sbis	0x10, 1	; 16
 218:	f9 cf       	rjmp	.-14     	; 0x20c <main+0x16>
		{
			index = 0;
 21a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 21e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			display(index);
 222:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 226:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 22a:	5f df       	rcall	.-322    	; 0xea <display>
 22c:	ef cf       	rjmp	.-34     	; 0x20c <main+0x16>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
