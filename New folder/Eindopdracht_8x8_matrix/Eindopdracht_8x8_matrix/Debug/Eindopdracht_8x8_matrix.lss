
Eindopdracht_8x8_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  00000416  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001117  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  00001837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000609  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000822  00000000  00000000  00002e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3a       	cpi	r26, 0xA0	; 160
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	c5 d0       	rcall	.+394    	; 0x23e <main>
  b4:	ae c1       	rjmp	.+860    	; 0x412 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <twi_init>:
		case 'U' : display8x8(alphabet[20]); break;
		case 'V' : display8x8(alphabet[21]); break;
		case 'W' : display8x8(alphabet[22]); break;
		case 'X' : display8x8(alphabet[23]); break;
		case 'Y' : display8x8(alphabet[24]); break;
		case 'Z' : display8x8(alphabet[25]); break;
  b8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  c2:	08 95       	ret

000000c4 <twi_start>:
  c4:	84 ea       	ldi	r24, 0xA4	; 164
  c6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ca:	e4 e7       	ldi	r30, 0x74	; 116
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <twi_start+0xa>
  d4:	08 95       	ret

000000d6 <twi_tx>:
  d6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e0:	e4 e7       	ldi	r30, 0x74	; 116
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <twi_tx+0xe>
  ea:	08 95       	ret

000000ec <wait>:
  ec:	18 16       	cp	r1, r24
  ee:	19 06       	cpc	r1, r25
  f0:	6c f4       	brge	.+26     	; 0x10c <wait+0x20>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	ef ec       	ldi	r30, 0xCF	; 207
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <wait+0xe>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <wait+0x14>
 100:	00 00       	nop
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	a9 f7       	brne	.-22     	; 0xf6 <wait+0xa>
 10c:	08 95       	ret

0000010e <sendDataAtLine>:
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	d8 2f       	mov	r29, r24
 114:	c6 2f       	mov	r28, r22
 116:	d6 df       	rcall	.-84     	; 0xc4 <twi_start>
 118:	80 ee       	ldi	r24, 0xE0	; 224
 11a:	dd df       	rcall	.-70     	; 0xd6 <twi_tx>
 11c:	8d 2f       	mov	r24, r29
 11e:	88 0f       	add	r24, r24
 120:	da df       	rcall	.-76     	; 0xd6 <twi_tx>
 122:	8c 2f       	mov	r24, r28
 124:	d8 df       	rcall	.-80     	; 0xd6 <twi_tx>
 126:	84 e9       	ldi	r24, 0x94	; 148
 128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <clear>:
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	c8 e0       	ldi	r28, 0x08	; 8
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	e7 df       	rcall	.-50     	; 0x10e <sendDataAtLine>
 140:	21 97       	sbiw	r28, 0x01	; 1
 142:	d9 f7       	brne	.-10     	; 0x13a <clear+0x8>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <display8x8>:
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	4c 01       	movw	r8, r24
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	f4 01       	movw	r30, r8
 16a:	80 81       	ld	r24, Z
 16c:	31 81       	ldd	r19, Z+1	; 0x01
 16e:	f2 e0       	ldi	r31, 0x02	; 2
 170:	8f 0e       	add	r8, r31
 172:	91 1c       	adc	r9, r1
 174:	28 2f       	mov	r18, r24
 176:	93 2f       	mov	r25, r19
 178:	99 0f       	add	r25, r25
 17a:	99 0b       	sbc	r25, r25
 17c:	68 94       	set
 17e:	aa 24       	eor	r10, r10
 180:	a1 f8       	bld	r10, 1
 182:	68 94       	set
 184:	bb 24       	eor	r11, r11
 186:	b1 f8       	bld	r11, 1
 188:	68 94       	set
 18a:	cc 24       	eor	r12, r12
 18c:	c1 f8       	bld	r12, 1
 18e:	68 94       	set
 190:	dd 24       	eor	r13, r13
 192:	d1 f8       	bld	r13, 1
 194:	68 94       	set
 196:	ee 24       	eor	r14, r14
 198:	e1 f8       	bld	r14, 1
 19a:	f1 2c       	mov	r15, r1
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	49 2f       	mov	r20, r25
 1a2:	59 2f       	mov	r21, r25
 1a4:	69 2f       	mov	r22, r25
 1a6:	79 2f       	mov	r23, r25
 1a8:	89 2f       	mov	r24, r25
 1aa:	75 d0       	rcall	.+234    	; 0x296 <__muldi3>
 1ac:	20 71       	andi	r18, 0x10	; 16
 1ae:	30 72       	andi	r19, 0x20	; 32
 1b0:	42 74       	andi	r20, 0x42	; 66
 1b2:	54 78       	andi	r21, 0x84	; 132
 1b4:	68 70       	andi	r22, 0x08	; 8
 1b6:	71 70       	andi	r23, 0x01	; 1
 1b8:	aa 24       	eor	r10, r10
 1ba:	aa 94       	dec	r10
 1bc:	0f 2e       	mov	r0, r31
 1be:	f3 e0       	ldi	r31, 0x03	; 3
 1c0:	bf 2e       	mov	r11, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
 1c8:	e1 2c       	mov	r14, r1
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	b4 d0       	rcall	.+360    	; 0x338 <__umoddi3>
 1d0:	62 2f       	mov	r22, r18
 1d2:	73 2f       	mov	r23, r19
 1d4:	ce 01       	movw	r24, r28
 1d6:	9b df       	rcall	.-202    	; 0x10e <sendDataAtLine>
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	c8 30       	cpi	r28, 0x08	; 8
 1dc:	d1 05       	cpc	r29, r1
 1de:	21 f6       	brne	.-120    	; 0x168 <display8x8+0x1e>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	af 90       	pop	r10
 1f4:	9f 90       	pop	r9
 1f6:	8f 90       	pop	r8
 1f8:	08 95       	ret

000001fa <initcommands>:
	}
}


void initcommands(void)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	
	// Init HT16K22. Page 32 datasheet
	twi_start();
 200:	61 df       	rcall	.-318    	; 0xc4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 202:	80 ee       	ldi	r24, 0xE0	; 224
 204:	68 df       	rcall	.-304    	; 0xd6 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 206:	81 e2       	ldi	r24, 0x21	; 33
 208:	66 df       	rcall	.-308    	; 0xd6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 20a:	c4 e7       	ldi	r28, 0x74	; 116
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	14 e9       	ldi	r17, 0x94	; 148
 210:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 212:	58 df       	rcall	.-336    	; 0xc4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 214:	80 ee       	ldi	r24, 0xE0	; 224
 216:	5f df       	rcall	.-322    	; 0xd6 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 218:	80 ea       	ldi	r24, 0xA0	; 160
 21a:	5d df       	rcall	.-326    	; 0xd6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 21c:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 21e:	52 df       	rcall	.-348    	; 0xc4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 220:	80 ee       	ldi	r24, 0xE0	; 224
 222:	59 df       	rcall	.-334    	; 0xd6 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 224:	83 ee       	ldi	r24, 0xE3	; 227
 226:	57 df       	rcall	.-338    	; 0xd6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 228:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 22a:	4c df       	rcall	.-360    	; 0xc4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 22c:	80 ee       	ldi	r24, 0xE0	; 224
 22e:	53 df       	rcall	.-346    	; 0xd6 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 230:	81 e8       	ldi	r24, 0x81	; 129
 232:	51 df       	rcall	.-350    	; 0xd6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 234:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
***********************/
{
	
	twi_init();		// Init TWI interface
 23e:	3c df       	rcall	.-392    	; 0xb8 <twi_init>
	initcommands();	// Standard commands before running 
 240:	dc df       	rcall	.-72     	; 0x1fa <initcommands>

	
	twi_start();
 242:	40 df       	rcall	.-384    	; 0xc4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 244:	80 ee       	ldi	r24, 0xE0	; 224
 246:	47 df       	rcall	.-370    	; 0xd6 <twi_tx>
	twi_tx(0x00);	// Address
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	45 df       	rcall	.-374    	; 0xd6 <twi_tx>
	twi_tx(0x00);	// data
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	43 df       	rcall	.-378    	; 0xd6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 250:	84 e9       	ldi	r24, 0x94	; 148
 252:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x00);	// Address
	twi_tx(0x00);	// data
	twi_stop();
	wait(500);
 256:	84 ef       	ldi	r24, 0xF4	; 244
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	48 df       	rcall	.-368    	; 0xec <wait>
	//twi_start();
	//twi_tx(0xE0);	// Display I2C addres + R/W bit
	//twi_tx(rij);	// Address
	//twi_tx(lampje);	// De lampjes in een gegeven rij die branden waarbij FF heel de rij laat branden en 00 niks

	clear();
 25c:	6a df       	rcall	.-300    	; 0x132 <clear>
		//sendDataAtLine(2, 0x3E);
		//wait(500);
		//sendDataAtLine(2, 0xff);
		//sendDataAtLine(6, 0xFF);
		//displayletter('W');
		display8x8(alphabet[i]);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	73 df       	rcall	.-282    	; 0x14a <display8x8>
		i++;
 264:	c1 e0       	ldi	r28, 0x01	; 1
 266:	d0 e0       	ldi	r29, 0x00	; 0
		if(i == 26){
			i = 0;
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <main+0x34>
 26e:	c0 2f       	mov	r28, r16
 270:	d1 2f       	mov	r29, r17
		}
		//sendDataAtLine(2, 0x81);
		wait(500);
 272:	84 ef       	ldi	r24, 0xF4	; 244
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	3a df       	rcall	.-396    	; 0xec <wait>
		//sendDataAtLine(2, 0x3E);
		//wait(500);
		//sendDataAtLine(2, 0xff);
		//sendDataAtLine(6, 0xFF);
		//displayletter('W');
		display8x8(alphabet[i]);
 278:	ce 01       	movw	r24, r28
 27a:	82 95       	swap	r24
 27c:	92 95       	swap	r25
 27e:	90 7f       	andi	r25, 0xF0	; 240
 280:	98 27       	eor	r25, r24
 282:	80 7f       	andi	r24, 0xF0	; 240
 284:	98 27       	eor	r25, r24
 286:	80 50       	subi	r24, 0x00	; 0
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	5f df       	rcall	.-322    	; 0x14a <display8x8>
		i++;
 28c:	21 96       	adiw	r28, 0x01	; 1
		if(i == 26){
 28e:	ca 31       	cpi	r28, 0x1A	; 26
 290:	d1 05       	cpc	r29, r1
 292:	79 f7       	brne	.-34     	; 0x272 <main+0x34>
 294:	ec cf       	rjmp	.-40     	; 0x26e <main+0x30>

00000296 <__muldi3>:
 296:	df 93       	push	r29
 298:	cf 93       	push	r28
 29a:	1f 93       	push	r17
 29c:	0f 93       	push	r16
 29e:	9a 9d       	mul	r25, r10
 2a0:	f0 2d       	mov	r31, r0
 2a2:	21 9f       	mul	r18, r17
 2a4:	f0 0d       	add	r31, r0
 2a6:	8b 9d       	mul	r24, r11
 2a8:	f0 0d       	add	r31, r0
 2aa:	8a 9d       	mul	r24, r10
 2ac:	e0 2d       	mov	r30, r0
 2ae:	f1 0d       	add	r31, r1
 2b0:	03 9f       	mul	r16, r19
 2b2:	f0 0d       	add	r31, r0
 2b4:	02 9f       	mul	r16, r18
 2b6:	e0 0d       	add	r30, r0
 2b8:	f1 1d       	adc	r31, r1
 2ba:	4e 9d       	mul	r20, r14
 2bc:	e0 0d       	add	r30, r0
 2be:	f1 1d       	adc	r31, r1
 2c0:	5e 9d       	mul	r21, r14
 2c2:	f0 0d       	add	r31, r0
 2c4:	4f 9d       	mul	r20, r15
 2c6:	f0 0d       	add	r31, r0
 2c8:	7f 93       	push	r23
 2ca:	6f 93       	push	r22
 2cc:	bf 92       	push	r11
 2ce:	af 92       	push	r10
 2d0:	5f 93       	push	r21
 2d2:	4f 93       	push	r20
 2d4:	d5 01       	movw	r26, r10
 2d6:	8e d0       	rcall	.+284    	; 0x3f4 <__umulhisi3>
 2d8:	8b 01       	movw	r16, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	d7 01       	movw	r26, r14
 2de:	8a d0       	rcall	.+276    	; 0x3f4 <__umulhisi3>
 2e0:	eb 01       	movw	r28, r22
 2e2:	e8 0f       	add	r30, r24
 2e4:	f9 1f       	adc	r31, r25
 2e6:	d6 01       	movw	r26, r12
 2e8:	1f d0       	rcall	.+62     	; 0x328 <__muldi3_6>
 2ea:	2f 91       	pop	r18
 2ec:	3f 91       	pop	r19
 2ee:	d6 01       	movw	r26, r12
 2f0:	81 d0       	rcall	.+258    	; 0x3f4 <__umulhisi3>
 2f2:	c6 0f       	add	r28, r22
 2f4:	d7 1f       	adc	r29, r23
 2f6:	e8 1f       	adc	r30, r24
 2f8:	f9 1f       	adc	r31, r25
 2fa:	af 91       	pop	r26
 2fc:	bf 91       	pop	r27
 2fe:	14 d0       	rcall	.+40     	; 0x328 <__muldi3_6>
 300:	2f 91       	pop	r18
 302:	3f 91       	pop	r19
 304:	77 d0       	rcall	.+238    	; 0x3f4 <__umulhisi3>
 306:	c6 0f       	add	r28, r22
 308:	d7 1f       	adc	r29, r23
 30a:	e8 1f       	adc	r30, r24
 30c:	f9 1f       	adc	r31, r25
 30e:	d6 01       	movw	r26, r12
 310:	71 d0       	rcall	.+226    	; 0x3f4 <__umulhisi3>
 312:	e6 0f       	add	r30, r22
 314:	f7 1f       	adc	r31, r23
 316:	98 01       	movw	r18, r16
 318:	be 01       	movw	r22, r28
 31a:	cf 01       	movw	r24, r30
 31c:	11 24       	eor	r1, r1
 31e:	0f 91       	pop	r16
 320:	1f 91       	pop	r17
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <__muldi3_6>:
 328:	65 d0       	rcall	.+202    	; 0x3f4 <__umulhisi3>
 32a:	46 0f       	add	r20, r22
 32c:	57 1f       	adc	r21, r23
 32e:	c8 1f       	adc	r28, r24
 330:	d9 1f       	adc	r29, r25
 332:	08 f4       	brcc	.+2      	; 0x336 <__muldi3_6+0xe>
 334:	31 96       	adiw	r30, 0x01	; 1
 336:	08 95       	ret

00000338 <__umoddi3>:
 338:	68 94       	set
 33a:	01 c0       	rjmp	.+2      	; 0x33e <__udivdi3_umoddi3>

0000033c <__udivdi3>:
 33c:	e8 94       	clt

0000033e <__udivdi3_umoddi3>:
 33e:	8f 92       	push	r8
 340:	9f 92       	push	r9
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	05 d0       	rcall	.+10     	; 0x352 <__udivmod64>
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	08 95       	ret

00000352 <__udivmod64>:
 352:	88 24       	eor	r8, r8
 354:	99 24       	eor	r9, r9
 356:	f4 01       	movw	r30, r8
 358:	e4 01       	movw	r28, r8
 35a:	b0 e4       	ldi	r27, 0x40	; 64
 35c:	9f 93       	push	r25
 35e:	aa 27       	eor	r26, r26
 360:	9a 15       	cp	r25, r10
 362:	8b 04       	cpc	r8, r11
 364:	9c 04       	cpc	r9, r12
 366:	ed 05       	cpc	r30, r13
 368:	fe 05       	cpc	r31, r14
 36a:	cf 05       	cpc	r28, r15
 36c:	d0 07       	cpc	r29, r16
 36e:	a1 07       	cpc	r26, r17
 370:	98 f4       	brcc	.+38     	; 0x398 <__udivmod64+0x46>
 372:	ad 2f       	mov	r26, r29
 374:	dc 2f       	mov	r29, r28
 376:	cf 2f       	mov	r28, r31
 378:	fe 2f       	mov	r31, r30
 37a:	e9 2d       	mov	r30, r9
 37c:	98 2c       	mov	r9, r8
 37e:	89 2e       	mov	r8, r25
 380:	98 2f       	mov	r25, r24
 382:	87 2f       	mov	r24, r23
 384:	76 2f       	mov	r23, r22
 386:	65 2f       	mov	r22, r21
 388:	54 2f       	mov	r21, r20
 38a:	43 2f       	mov	r20, r19
 38c:	32 2f       	mov	r19, r18
 38e:	22 27       	eor	r18, r18
 390:	b8 50       	subi	r27, 0x08	; 8
 392:	31 f7       	brne	.-52     	; 0x360 <__udivmod64+0xe>
 394:	bf 91       	pop	r27
 396:	27 c0       	rjmp	.+78     	; 0x3e6 <__udivmod64+0x94>
 398:	1b 2e       	mov	r1, r27
 39a:	bf 91       	pop	r27
 39c:	bb 27       	eor	r27, r27
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	44 1f       	adc	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	88 1c       	adc	r8, r8
 3b0:	99 1c       	adc	r9, r9
 3b2:	ee 1f       	adc	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	cc 1f       	adc	r28, r28
 3b8:	dd 1f       	adc	r29, r29
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	8a 14       	cp	r8, r10
 3c0:	9b 04       	cpc	r9, r11
 3c2:	ec 05       	cpc	r30, r12
 3c4:	fd 05       	cpc	r31, r13
 3c6:	ce 05       	cpc	r28, r14
 3c8:	df 05       	cpc	r29, r15
 3ca:	a0 07       	cpc	r26, r16
 3cc:	b1 07       	cpc	r27, r17
 3ce:	48 f0       	brcs	.+18     	; 0x3e2 <__udivmod64+0x90>
 3d0:	8a 18       	sub	r8, r10
 3d2:	9b 08       	sbc	r9, r11
 3d4:	ec 09       	sbc	r30, r12
 3d6:	fd 09       	sbc	r31, r13
 3d8:	ce 09       	sbc	r28, r14
 3da:	df 09       	sbc	r29, r15
 3dc:	a0 0b       	sbc	r26, r16
 3de:	b1 0b       	sbc	r27, r17
 3e0:	21 60       	ori	r18, 0x01	; 1
 3e2:	1a 94       	dec	r1
 3e4:	e1 f6       	brne	.-72     	; 0x39e <__udivmod64+0x4c>
 3e6:	2e f4       	brtc	.+10     	; 0x3f2 <__udivmod64+0xa0>
 3e8:	94 01       	movw	r18, r8
 3ea:	af 01       	movw	r20, r30
 3ec:	be 01       	movw	r22, r28
 3ee:	cd 01       	movw	r24, r26
 3f0:	00 0c       	add	r0, r0
 3f2:	08 95       	ret

000003f4 <__umulhisi3>:
 3f4:	a2 9f       	mul	r26, r18
 3f6:	b0 01       	movw	r22, r0
 3f8:	b3 9f       	mul	r27, r19
 3fa:	c0 01       	movw	r24, r0
 3fc:	a3 9f       	mul	r26, r19
 3fe:	70 0d       	add	r23, r0
 400:	81 1d       	adc	r24, r1
 402:	11 24       	eor	r1, r1
 404:	91 1d       	adc	r25, r1
 406:	b2 9f       	mul	r27, r18
 408:	70 0d       	add	r23, r0
 40a:	81 1d       	adc	r24, r1
 40c:	11 24       	eor	r1, r1
 40e:	91 1d       	adc	r25, r1
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
