
Eindopdracht_8x8_matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002a2  008002a2  00000748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113e  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000695  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e4  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	24 c1       	rjmp	.+584    	; 0x24e <__vector_1>
   6:	00 00       	nop
   8:	41 c1       	rjmp	.+642    	; 0x28c <__vector_2>
   a:	00 00       	nop
   c:	60 c1       	rjmp	.+704    	; 0x2ce <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 3a       	cpi	r26, 0xA2	; 162
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a2 ea       	ldi	r26, 0xA2	; 162
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 3a       	cpi	r26, 0xA4	; 164
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	25 d1       	rcall	.+586    	; 0x30e <main>
  c4:	24 c2       	rjmp	.+1096   	; 0x50e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <twi_init>:
		case 'U' : display8x8(alphabet[20]); break;
		case 'V' : display8x8(alphabet[21]); break;
		case 'W' : display8x8(alphabet[22]); break;
		case 'X' : display8x8(alphabet[23]); break;
		case 'Y' : display8x8(alphabet[24]); break;
		case 'Z' : display8x8(alphabet[25]); break;
  c8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d2:	08 95       	ret

000000d4 <twi_start>:
  d4:	84 ea       	ldi	r24, 0xA4	; 164
  d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	ec f7       	brge	.-6      	; 0xde <twi_start+0xa>
  e4:	08 95       	ret

000000e6 <twi_tx>:
  e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	ec f7       	brge	.-6      	; 0xf4 <twi_tx+0xe>
  fa:	08 95       	ret

000000fc <wait>:
  fc:	18 16       	cp	r1, r24
  fe:	19 06       	cpc	r1, r25
 100:	6c f4       	brge	.+26     	; 0x11c <wait+0x20>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	ef ec       	ldi	r30, 0xCF	; 207
 108:	f7 e0       	ldi	r31, 0x07	; 7
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <wait+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <wait+0x14>
 110:	00 00       	nop
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	a9 f7       	brne	.-22     	; 0x106 <wait+0xa>
 11c:	08 95       	ret

0000011e <sendDataAtLine>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	d8 2f       	mov	r29, r24
 124:	c6 2f       	mov	r28, r22
 126:	d6 df       	rcall	.-84     	; 0xd4 <twi_start>
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	dd df       	rcall	.-70     	; 0xe6 <twi_tx>
 12c:	8d 2f       	mov	r24, r29
 12e:	88 0f       	add	r24, r24
 130:	da df       	rcall	.-76     	; 0xe6 <twi_tx>
 132:	8c 2f       	mov	r24, r28
 134:	d8 df       	rcall	.-80     	; 0xe6 <twi_tx>
 136:	84 e9       	ldi	r24, 0x94	; 148
 138:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <clear>:
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	c8 e0       	ldi	r28, 0x08	; 8
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	e7 df       	rcall	.-50     	; 0x11e <sendDataAtLine>
 150:	21 97       	sbiw	r28, 0x01	; 1
 152:	d9 f7       	brne	.-10     	; 0x14a <clear+0x8>
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <display8x8>:
 15a:	8f 92       	push	r8
 15c:	9f 92       	push	r9
 15e:	af 92       	push	r10
 160:	bf 92       	push	r11
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	4c 01       	movw	r8, r24
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	f4 01       	movw	r30, r8
 17a:	80 81       	ld	r24, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	f2 e0       	ldi	r31, 0x02	; 2
 180:	8f 0e       	add	r8, r31
 182:	91 1c       	adc	r9, r1
 184:	28 2f       	mov	r18, r24
 186:	93 2f       	mov	r25, r19
 188:	99 0f       	add	r25, r25
 18a:	99 0b       	sbc	r25, r25
 18c:	68 94       	set
 18e:	aa 24       	eor	r10, r10
 190:	a1 f8       	bld	r10, 1
 192:	68 94       	set
 194:	bb 24       	eor	r11, r11
 196:	b1 f8       	bld	r11, 1
 198:	68 94       	set
 19a:	cc 24       	eor	r12, r12
 19c:	c1 f8       	bld	r12, 1
 19e:	68 94       	set
 1a0:	dd 24       	eor	r13, r13
 1a2:	d1 f8       	bld	r13, 1
 1a4:	68 94       	set
 1a6:	ee 24       	eor	r14, r14
 1a8:	e1 f8       	bld	r14, 1
 1aa:	f1 2c       	mov	r15, r1
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	49 2f       	mov	r20, r25
 1b2:	59 2f       	mov	r21, r25
 1b4:	69 2f       	mov	r22, r25
 1b6:	79 2f       	mov	r23, r25
 1b8:	89 2f       	mov	r24, r25
 1ba:	eb d0       	rcall	.+470    	; 0x392 <__muldi3>
 1bc:	20 71       	andi	r18, 0x10	; 16
 1be:	30 72       	andi	r19, 0x20	; 32
 1c0:	42 74       	andi	r20, 0x42	; 66
 1c2:	54 78       	andi	r21, 0x84	; 132
 1c4:	68 70       	andi	r22, 0x08	; 8
 1c6:	71 70       	andi	r23, 0x01	; 1
 1c8:	aa 24       	eor	r10, r10
 1ca:	aa 94       	dec	r10
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f3 e0       	ldi	r31, 0x03	; 3
 1d0:	bf 2e       	mov	r11, r31
 1d2:	f0 2d       	mov	r31, r0
 1d4:	c1 2c       	mov	r12, r1
 1d6:	d1 2c       	mov	r13, r1
 1d8:	e1 2c       	mov	r14, r1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2a d1       	rcall	.+596    	; 0x434 <__umoddi3>
 1e0:	62 2f       	mov	r22, r18
 1e2:	73 2f       	mov	r23, r19
 1e4:	ce 01       	movw	r24, r28
 1e6:	9b df       	rcall	.-202    	; 0x11e <sendDataAtLine>
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	c8 30       	cpi	r28, 0x08	; 8
 1ec:	d1 05       	cpc	r29, r1
 1ee:	21 f6       	brne	.-120    	; 0x178 <display8x8+0x1e>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	bf 90       	pop	r11
 202:	af 90       	pop	r10
 204:	9f 90       	pop	r9
 206:	8f 90       	pop	r8
 208:	08 95       	ret

0000020a <initcommands>:
	}
}


void initcommands(void)
{
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	
	// Init HT16K22. Page 32 datasheet
	twi_start();
 210:	61 df       	rcall	.-318    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 212:	80 ee       	ldi	r24, 0xE0	; 224
 214:	68 df       	rcall	.-304    	; 0xe6 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 216:	81 e2       	ldi	r24, 0x21	; 33
 218:	66 df       	rcall	.-308    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 21a:	c4 e7       	ldi	r28, 0x74	; 116
 21c:	d0 e0       	ldi	r29, 0x00	; 0
 21e:	14 e9       	ldi	r17, 0x94	; 148
 220:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 222:	58 df       	rcall	.-336    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 224:	80 ee       	ldi	r24, 0xE0	; 224
 226:	5f df       	rcall	.-322    	; 0xe6 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	5d df       	rcall	.-326    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 22c:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 22e:	52 df       	rcall	.-348    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 230:	80 ee       	ldi	r24, 0xE0	; 224
 232:	59 df       	rcall	.-334    	; 0xe6 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 234:	83 ee       	ldi	r24, 0xE3	; 227
 236:	57 df       	rcall	.-338    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 238:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 23a:	4c df       	rcall	.-360    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 23c:	80 ee       	ldi	r24, 0xE0	; 224
 23e:	53 df       	rcall	.-346    	; 0xe6 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 240:	81 e8       	ldi	r24, 0x81	; 129
 242:	51 df       	rcall	.-350    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 244:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	08 95       	ret

0000024e <__vector_1>:


ISR( INT0_vect ) {
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
	indexalphabet++;
 25c:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
 260:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x1>
 264:	01 96       	adiw	r24, 0x01	; 1
	if(indexalphabet == 26) {
 266:	8a 31       	cpi	r24, 0x1A	; 26
 268:	91 05       	cpc	r25, r1
 26a:	29 f0       	breq	.+10     	; 0x276 <__vector_1+0x28>
	twi_stop();
}


ISR( INT0_vect ) {
	indexalphabet++;
 26c:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x1>
 270:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
 274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_1+0x30>
	if(indexalphabet == 26) {
	indexalphabet = 0;
 276:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <__data_end+0x1>
 27a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__data_end>
	}
}
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_2>:

ISR( INT1_vect ) {
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	indexalphabet--;
 29c:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
 2a0:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x1>
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	28 f0       	brcs	.+10     	; 0x2b2 <__vector_2+0x26>
 2a8:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x1>
 2ac:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <__vector_2+0x32>
	if(indexalphabet == -1) {
		indexalphabet = 25;
 2b2:	89 e1       	ldi	r24, 0x19	; 25
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x1>
 2ba:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
	}
}
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_3>:

ISR( INT2_vect ) {
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
	isCycling = isCycling == 0 ? 1 : 0;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2ec:	23 2b       	or	r18, r19
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <__vector_3+0x26>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <main>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
***********************/
{
	
	twi_init();		// Init TWI interface
 30e:	dc de       	rcall	.-584    	; 0xc8 <twi_init>
	initcommands();	// Standard commands before running 
 310:	7c df       	rcall	.-264    	; 0x20a <initcommands>

	
	twi_start();
 312:	e0 de       	rcall	.-576    	; 0xd4 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 314:	80 ee       	ldi	r24, 0xE0	; 224
 316:	e7 de       	rcall	.-562    	; 0xe6 <twi_tx>
	twi_tx(0x00);	// Address
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	e5 de       	rcall	.-566    	; 0xe6 <twi_tx>
	twi_tx(0x00);	// data
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	e3 de       	rcall	.-570    	; 0xe6 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
***********************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 320:	84 e9       	ldi	r24, 0x94	; 148
 322:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x00);	// Address
	twi_tx(0x00);	// data
	twi_stop();
	wait(500);
 326:	84 ef       	ldi	r24, 0xF4	; 244
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	e8 de       	rcall	.-560    	; 0xfc <wait>
	//twi_start();
	//twi_tx(0xE0);	// Display I2C addres + R/W bit
	//twi_tx(rij);	// Address
	//twi_tx(lampje);	// De lampjes in een gegeven rij die branden waarbij FF heel de rij laat branden en 00 niks

	clear();
 32c:	0a df       	rcall	.-492    	; 0x142 <clear>
	
	DDRD = 0x00;
 32e:	11 ba       	out	0x11, r1	; 17

	EICRA |= 0x3F;
 330:	ea e6       	ldi	r30, 0x6A	; 106
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8f 63       	ori	r24, 0x3F	; 63
 338:	80 83       	st	Z, r24
	//INT2,1,0 rising edge
	EIMSK |= 0x07;			// Enable INT2 & INT1 & INT0
 33a:	89 b7       	in	r24, 0x39	; 57
 33c:	87 60       	ori	r24, 0x07	; 7
 33e:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	sei();
 340:	78 94       	sei
		//sendDataAtLine(2, 0x3E);
		//wait(500);
		//sendDataAtLine(2, 0xff);
		//sendDataAtLine(6, 0xFF);
		//displayletter('W');
		display8x8(alphabet[indexalphabet]);
 342:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
 346:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x1>
 34a:	82 95       	swap	r24
 34c:	92 95       	swap	r25
 34e:	90 7f       	andi	r25, 0xF0	; 240
 350:	98 27       	eor	r25, r24
 352:	80 7f       	andi	r24, 0xF0	; 240
 354:	98 27       	eor	r25, r24
 356:	8e 5f       	subi	r24, 0xFE	; 254
 358:	9e 4f       	sbci	r25, 0xFE	; 254
 35a:	ff de       	rcall	.-514    	; 0x15a <display8x8>
		if(isCycling) {
 35c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 360:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 364:	89 2b       	or	r24, r25
 366:	89 f0       	breq	.+34     	; 0x38a <main+0x7c>
			indexalphabet++;
 368:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
 36c:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x1>
 370:	01 96       	adiw	r24, 0x01	; 1
			if(indexalphabet == 26){
 372:	8a 31       	cpi	r24, 0x1A	; 26
 374:	91 05       	cpc	r25, r1
 376:	29 f0       	breq	.+10     	; 0x382 <main+0x74>
		//sendDataAtLine(2, 0xff);
		//sendDataAtLine(6, 0xFF);
		//displayletter('W');
		display8x8(alphabet[indexalphabet]);
		if(isCycling) {
			indexalphabet++;
 378:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x1>
 37c:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
 380:	04 c0       	rjmp	.+8      	; 0x38a <main+0x7c>
			if(indexalphabet == 26){
				indexalphabet = 0;
 382:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <__data_end+0x1>
 386:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__data_end>
			}
		}
		//sendDataAtLine(2, 0x81);
		wait(500);
 38a:	84 ef       	ldi	r24, 0xF4	; 244
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	b6 de       	rcall	.-660    	; 0xfc <wait>
	}
 390:	d8 cf       	rjmp	.-80     	; 0x342 <main+0x34>

00000392 <__muldi3>:
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	1f 93       	push	r17
 398:	0f 93       	push	r16
 39a:	9a 9d       	mul	r25, r10
 39c:	f0 2d       	mov	r31, r0
 39e:	21 9f       	mul	r18, r17
 3a0:	f0 0d       	add	r31, r0
 3a2:	8b 9d       	mul	r24, r11
 3a4:	f0 0d       	add	r31, r0
 3a6:	8a 9d       	mul	r24, r10
 3a8:	e0 2d       	mov	r30, r0
 3aa:	f1 0d       	add	r31, r1
 3ac:	03 9f       	mul	r16, r19
 3ae:	f0 0d       	add	r31, r0
 3b0:	02 9f       	mul	r16, r18
 3b2:	e0 0d       	add	r30, r0
 3b4:	f1 1d       	adc	r31, r1
 3b6:	4e 9d       	mul	r20, r14
 3b8:	e0 0d       	add	r30, r0
 3ba:	f1 1d       	adc	r31, r1
 3bc:	5e 9d       	mul	r21, r14
 3be:	f0 0d       	add	r31, r0
 3c0:	4f 9d       	mul	r20, r15
 3c2:	f0 0d       	add	r31, r0
 3c4:	7f 93       	push	r23
 3c6:	6f 93       	push	r22
 3c8:	bf 92       	push	r11
 3ca:	af 92       	push	r10
 3cc:	5f 93       	push	r21
 3ce:	4f 93       	push	r20
 3d0:	d5 01       	movw	r26, r10
 3d2:	8e d0       	rcall	.+284    	; 0x4f0 <__umulhisi3>
 3d4:	8b 01       	movw	r16, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	d7 01       	movw	r26, r14
 3da:	8a d0       	rcall	.+276    	; 0x4f0 <__umulhisi3>
 3dc:	eb 01       	movw	r28, r22
 3de:	e8 0f       	add	r30, r24
 3e0:	f9 1f       	adc	r31, r25
 3e2:	d6 01       	movw	r26, r12
 3e4:	1f d0       	rcall	.+62     	; 0x424 <__muldi3_6>
 3e6:	2f 91       	pop	r18
 3e8:	3f 91       	pop	r19
 3ea:	d6 01       	movw	r26, r12
 3ec:	81 d0       	rcall	.+258    	; 0x4f0 <__umulhisi3>
 3ee:	c6 0f       	add	r28, r22
 3f0:	d7 1f       	adc	r29, r23
 3f2:	e8 1f       	adc	r30, r24
 3f4:	f9 1f       	adc	r31, r25
 3f6:	af 91       	pop	r26
 3f8:	bf 91       	pop	r27
 3fa:	14 d0       	rcall	.+40     	; 0x424 <__muldi3_6>
 3fc:	2f 91       	pop	r18
 3fe:	3f 91       	pop	r19
 400:	77 d0       	rcall	.+238    	; 0x4f0 <__umulhisi3>
 402:	c6 0f       	add	r28, r22
 404:	d7 1f       	adc	r29, r23
 406:	e8 1f       	adc	r30, r24
 408:	f9 1f       	adc	r31, r25
 40a:	d6 01       	movw	r26, r12
 40c:	71 d0       	rcall	.+226    	; 0x4f0 <__umulhisi3>
 40e:	e6 0f       	add	r30, r22
 410:	f7 1f       	adc	r31, r23
 412:	98 01       	movw	r18, r16
 414:	be 01       	movw	r22, r28
 416:	cf 01       	movw	r24, r30
 418:	11 24       	eor	r1, r1
 41a:	0f 91       	pop	r16
 41c:	1f 91       	pop	r17
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <__muldi3_6>:
 424:	65 d0       	rcall	.+202    	; 0x4f0 <__umulhisi3>
 426:	46 0f       	add	r20, r22
 428:	57 1f       	adc	r21, r23
 42a:	c8 1f       	adc	r28, r24
 42c:	d9 1f       	adc	r29, r25
 42e:	08 f4       	brcc	.+2      	; 0x432 <__muldi3_6+0xe>
 430:	31 96       	adiw	r30, 0x01	; 1
 432:	08 95       	ret

00000434 <__umoddi3>:
 434:	68 94       	set
 436:	01 c0       	rjmp	.+2      	; 0x43a <__udivdi3_umoddi3>

00000438 <__udivdi3>:
 438:	e8 94       	clt

0000043a <__udivdi3_umoddi3>:
 43a:	8f 92       	push	r8
 43c:	9f 92       	push	r9
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	05 d0       	rcall	.+10     	; 0x44e <__udivmod64>
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	9f 90       	pop	r9
 44a:	8f 90       	pop	r8
 44c:	08 95       	ret

0000044e <__udivmod64>:
 44e:	88 24       	eor	r8, r8
 450:	99 24       	eor	r9, r9
 452:	f4 01       	movw	r30, r8
 454:	e4 01       	movw	r28, r8
 456:	b0 e4       	ldi	r27, 0x40	; 64
 458:	9f 93       	push	r25
 45a:	aa 27       	eor	r26, r26
 45c:	9a 15       	cp	r25, r10
 45e:	8b 04       	cpc	r8, r11
 460:	9c 04       	cpc	r9, r12
 462:	ed 05       	cpc	r30, r13
 464:	fe 05       	cpc	r31, r14
 466:	cf 05       	cpc	r28, r15
 468:	d0 07       	cpc	r29, r16
 46a:	a1 07       	cpc	r26, r17
 46c:	98 f4       	brcc	.+38     	; 0x494 <__udivmod64+0x46>
 46e:	ad 2f       	mov	r26, r29
 470:	dc 2f       	mov	r29, r28
 472:	cf 2f       	mov	r28, r31
 474:	fe 2f       	mov	r31, r30
 476:	e9 2d       	mov	r30, r9
 478:	98 2c       	mov	r9, r8
 47a:	89 2e       	mov	r8, r25
 47c:	98 2f       	mov	r25, r24
 47e:	87 2f       	mov	r24, r23
 480:	76 2f       	mov	r23, r22
 482:	65 2f       	mov	r22, r21
 484:	54 2f       	mov	r21, r20
 486:	43 2f       	mov	r20, r19
 488:	32 2f       	mov	r19, r18
 48a:	22 27       	eor	r18, r18
 48c:	b8 50       	subi	r27, 0x08	; 8
 48e:	31 f7       	brne	.-52     	; 0x45c <__udivmod64+0xe>
 490:	bf 91       	pop	r27
 492:	27 c0       	rjmp	.+78     	; 0x4e2 <__udivmod64+0x94>
 494:	1b 2e       	mov	r1, r27
 496:	bf 91       	pop	r27
 498:	bb 27       	eor	r27, r27
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	44 1f       	adc	r20, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	88 1c       	adc	r8, r8
 4ac:	99 1c       	adc	r9, r9
 4ae:	ee 1f       	adc	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	cc 1f       	adc	r28, r28
 4b4:	dd 1f       	adc	r29, r29
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	8a 14       	cp	r8, r10
 4bc:	9b 04       	cpc	r9, r11
 4be:	ec 05       	cpc	r30, r12
 4c0:	fd 05       	cpc	r31, r13
 4c2:	ce 05       	cpc	r28, r14
 4c4:	df 05       	cpc	r29, r15
 4c6:	a0 07       	cpc	r26, r16
 4c8:	b1 07       	cpc	r27, r17
 4ca:	48 f0       	brcs	.+18     	; 0x4de <__udivmod64+0x90>
 4cc:	8a 18       	sub	r8, r10
 4ce:	9b 08       	sbc	r9, r11
 4d0:	ec 09       	sbc	r30, r12
 4d2:	fd 09       	sbc	r31, r13
 4d4:	ce 09       	sbc	r28, r14
 4d6:	df 09       	sbc	r29, r15
 4d8:	a0 0b       	sbc	r26, r16
 4da:	b1 0b       	sbc	r27, r17
 4dc:	21 60       	ori	r18, 0x01	; 1
 4de:	1a 94       	dec	r1
 4e0:	e1 f6       	brne	.-72     	; 0x49a <__udivmod64+0x4c>
 4e2:	2e f4       	brtc	.+10     	; 0x4ee <__udivmod64+0xa0>
 4e4:	94 01       	movw	r18, r8
 4e6:	af 01       	movw	r20, r30
 4e8:	be 01       	movw	r22, r28
 4ea:	cd 01       	movw	r24, r26
 4ec:	00 0c       	add	r0, r0
 4ee:	08 95       	ret

000004f0 <__umulhisi3>:
 4f0:	a2 9f       	mul	r26, r18
 4f2:	b0 01       	movw	r22, r0
 4f4:	b3 9f       	mul	r27, r19
 4f6:	c0 01       	movw	r24, r0
 4f8:	a3 9f       	mul	r26, r19
 4fa:	70 0d       	add	r23, r0
 4fc:	81 1d       	adc	r24, r1
 4fe:	11 24       	eor	r1, r1
 500:	91 1d       	adc	r25, r1
 502:	b2 9f       	mul	r27, r18
 504:	70 0d       	add	r23, r0
 506:	81 1d       	adc	r24, r1
 508:	11 24       	eor	r1, r1
 50a:	91 1d       	adc	r25, r1
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
